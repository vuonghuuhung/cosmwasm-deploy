/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, Binary, Cw20ReceiveMsg, QueryMsg, ArrayOfAllowListTokenResponse, AllowListTokenResponse, ArrayOfAllowListVaultResponse, AllowListVaultResponse, Addr, ConfigResponse, DepositInfoResponse, ShareBalanceResponse, VaultInfoResponse, WithdrawInfoResponse } from "./OraiGateway.types";
export interface OraiGatewayReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  vaultInfo: ({
    vault
  }: {
    vault: string;
  }) => Promise<VaultInfoResponse>;
  depositInfo: ({
    address,
    vault
  }: {
    address: string;
    vault: string;
  }) => Promise<DepositInfoResponse>;
  withdrawInfo: ({
    address,
    vault
  }: {
    address: string;
    vault: string;
  }) => Promise<WithdrawInfoResponse>;
  shareBalance: ({
    address,
    vault
  }: {
    address: string;
    vault: string;
  }) => Promise<ShareBalanceResponse>;
  allowListToken: ({
    token
  }: {
    token: string;
  }) => Promise<AllowListTokenResponse>;
  allowListVault: ({
    vault
  }: {
    vault: string;
  }) => Promise<AllowListVaultResponse>;
  allAllowListToken: () => Promise<ArrayOfAllowListTokenResponse>;
  allAllowListVault: () => Promise<ArrayOfAllowListVaultResponse>;
}
export class OraiGatewayQueryClient implements OraiGatewayReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.vaultInfo = this.vaultInfo.bind(this);
    this.depositInfo = this.depositInfo.bind(this);
    this.withdrawInfo = this.withdrawInfo.bind(this);
    this.shareBalance = this.shareBalance.bind(this);
    this.allowListToken = this.allowListToken.bind(this);
    this.allowListVault = this.allowListVault.bind(this);
    this.allAllowListToken = this.allAllowListToken.bind(this);
    this.allAllowListVault = this.allAllowListVault.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  vaultInfo = async ({
    vault
  }: {
    vault: string;
  }): Promise<VaultInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      vault_info: {
        vault
      }
    });
  };
  depositInfo = async ({
    address,
    vault
  }: {
    address: string;
    vault: string;
  }): Promise<DepositInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      deposit_info: {
        address,
        vault
      }
    });
  };
  withdrawInfo = async ({
    address,
    vault
  }: {
    address: string;
    vault: string;
  }): Promise<WithdrawInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      withdraw_info: {
        address,
        vault
      }
    });
  };
  shareBalance = async ({
    address,
    vault
  }: {
    address: string;
    vault: string;
  }): Promise<ShareBalanceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      share_balance: {
        address,
        vault
      }
    });
  };
  allowListToken = async ({
    token
  }: {
    token: string;
  }): Promise<AllowListTokenResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      allow_list_token: {
        token
      }
    });
  };
  allowListVault = async ({
    vault
  }: {
    vault: string;
  }): Promise<AllowListVaultResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      allow_list_vault: {
        vault
      }
    });
  };
  allAllowListToken = async (): Promise<ArrayOfAllowListTokenResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_allow_list_token: {}
    });
  };
  allAllowListVault = async (): Promise<ArrayOfAllowListVaultResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_allow_list_vault: {}
    });
  };
}
export interface OraiGatewayInterface extends OraiGatewayReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    admin,
    ibcBridgeWasm
  }: {
    admin: string;
    ibcBridgeWasm: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateVaultInfo: ({
    decimals,
    sharePrice,
    tvl,
    vault
  }: {
    decimals: number;
    sharePrice: number;
    tvl: number;
    vault: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdraw: ({
    amount,
    vault
  }: {
    amount: number;
    vault: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  addAllowListToken: ({
    token
  }: {
    token: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  addAllowListVault: ({
    vault
  }: {
    vault: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  fulfillDepositOrder: ({
    amount,
    denom,
    shareReceive,
    user,
    vault
  }: {
    amount: number;
    denom: string;
    shareReceive: number;
    user: string;
    vault: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  fulfillWithdrawOrder: ({
    amount,
    user,
    vault
  }: {
    amount: number;
    user: string;
    vault: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OraiGatewayClient extends OraiGatewayQueryClient implements OraiGatewayInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.updateVaultInfo = this.updateVaultInfo.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.addAllowListToken = this.addAllowListToken.bind(this);
    this.addAllowListVault = this.addAllowListVault.bind(this);
    this.fulfillDepositOrder = this.fulfillDepositOrder.bind(this);
    this.fulfillWithdrawOrder = this.fulfillWithdrawOrder.bind(this);
  }

  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    admin,
    ibcBridgeWasm
  }: {
    admin: string;
    ibcBridgeWasm: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        admin,
        ibc_bridge_wasm: ibcBridgeWasm
      }
    }, fee, memo, _funds);
  };
  updateVaultInfo = async ({
    decimals,
    sharePrice,
    tvl,
    vault
  }: {
    decimals: number;
    sharePrice: number;
    tvl: number;
    vault: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_vault_info: {
        decimals,
        share_price: sharePrice,
        tvl,
        vault
      }
    }, fee, memo, _funds);
  };
  withdraw = async ({
    amount,
    vault
  }: {
    amount: number;
    vault: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {
        amount,
        vault
      }
    }, fee, memo, _funds);
  };
  addAllowListToken = async ({
    token
  }: {
    token: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_allow_list_token: {
        token
      }
    }, fee, memo, _funds);
  };
  addAllowListVault = async ({
    vault
  }: {
    vault: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_allow_list_vault: {
        vault
      }
    }, fee, memo, _funds);
  };
  fulfillDepositOrder = async ({
    amount,
    denom,
    shareReceive,
    user,
    vault
  }: {
    amount: number;
    denom: string;
    shareReceive: number;
    user: string;
    vault: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      fulfill_deposit_order: {
        amount,
        denom,
        share_receive: shareReceive,
        user,
        vault
      }
    }, fee, memo, _funds);
  };
  fulfillWithdrawOrder = async ({
    amount,
    user,
    vault
  }: {
    amount: number;
    user: string;
    vault: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      fulfill_withdraw_order: {
        amount,
        user,
        vault
      }
    }, fee, memo, _funds);
  };
}